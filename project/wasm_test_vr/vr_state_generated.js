// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var VR = VR || {};

/**
 * @constructor
 */
VR.GamepadButton = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VR.GamepadButton}
 */
VR.GamepadButton.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.GamepadButton=} obj
 * @returns {VR.GamepadButton}
 */
VR.GamepadButton.getRootAsGamepadButton = function(bb, obj) {
  return (obj || new VR.GamepadButton).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.GamepadButton=} obj
 * @returns {VR.GamepadButton}
 */
VR.GamepadButton.getSizePrefixedRootAsGamepadButton = function(bb, obj) {
  return (obj || new VR.GamepadButton).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {boolean}
 */
VR.GamepadButton.prototype.pressed = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
VR.GamepadButton.prototype.touched = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {number}
 */
VR.GamepadButton.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
VR.GamepadButton.startGamepadButton = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} pressed
 */
VR.GamepadButton.addPressed = function(builder, pressed) {
  builder.addFieldInt8(0, +pressed, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} touched
 */
VR.GamepadButton.addTouched = function(builder, touched) {
  builder.addFieldInt8(1, +touched, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 */
VR.GamepadButton.addValue = function(builder, value) {
  builder.addFieldFloat64(2, value, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
VR.GamepadButton.endGamepadButton = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} pressed
 * @param {boolean} touched
 * @param {number} value
 * @returns {flatbuffers.Offset}
 */
VR.GamepadButton.createGamepadButton = function(builder, pressed, touched, value) {
  VR.GamepadButton.startGamepadButton(builder);
  VR.GamepadButton.addPressed(builder, pressed);
  VR.GamepadButton.addTouched(builder, touched);
  VR.GamepadButton.addValue(builder, value);
  return VR.GamepadButton.endGamepadButton(builder);
}

/**
 * @constructor
 */
VR.Pose = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VR.Pose}
 */
VR.Pose.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.Pose=} obj
 * @returns {VR.Pose}
 */
VR.Pose.getRootAsPose = function(bb, obj) {
  return (obj || new VR.Pose).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.Pose=} obj
 * @returns {VR.Pose}
 */
VR.Pose.getSizePrefixedRootAsPose = function(bb, obj) {
  return (obj || new VR.Pose).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.Pose.prototype.position = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.Pose.prototype.positionLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.Pose.prototype.positionArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.Pose.prototype.linearVelocity = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.Pose.prototype.linearVelocityLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.Pose.prototype.linearVelocityArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.Pose.prototype.linearAcceleration = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.Pose.prototype.linearAccelerationLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.Pose.prototype.linearAccelerationArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.Pose.prototype.orientation = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.Pose.prototype.orientationLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.Pose.prototype.orientationArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.Pose.prototype.angularVeclocity = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.Pose.prototype.angularVeclocityLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.Pose.prototype.angularVeclocityArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.Pose.prototype.angularAcceleration = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.Pose.prototype.angularAccelerationLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.Pose.prototype.angularAccelerationArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
VR.Pose.startPose = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} positionOffset
 */
VR.Pose.addPosition = function(builder, positionOffset) {
  builder.addFieldOffset(0, positionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.Pose.createPositionVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Pose.startPositionVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} linearVelocityOffset
 */
VR.Pose.addLinearVelocity = function(builder, linearVelocityOffset) {
  builder.addFieldOffset(1, linearVelocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.Pose.createLinearVelocityVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Pose.startLinearVelocityVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} linearAccelerationOffset
 */
VR.Pose.addLinearAcceleration = function(builder, linearAccelerationOffset) {
  builder.addFieldOffset(2, linearAccelerationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.Pose.createLinearAccelerationVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Pose.startLinearAccelerationVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} orientationOffset
 */
VR.Pose.addOrientation = function(builder, orientationOffset) {
  builder.addFieldOffset(3, orientationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.Pose.createOrientationVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Pose.startOrientationVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} angularVeclocityOffset
 */
VR.Pose.addAngularVeclocity = function(builder, angularVeclocityOffset) {
  builder.addFieldOffset(4, angularVeclocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.Pose.createAngularVeclocityVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Pose.startAngularVeclocityVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} angularAccelerationOffset
 */
VR.Pose.addAngularAcceleration = function(builder, angularAccelerationOffset) {
  builder.addFieldOffset(5, angularAccelerationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.Pose.createAngularAccelerationVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Pose.startAngularAccelerationVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
VR.Pose.endPose = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} positionOffset
 * @param {flatbuffers.Offset} linearVelocityOffset
 * @param {flatbuffers.Offset} linearAccelerationOffset
 * @param {flatbuffers.Offset} orientationOffset
 * @param {flatbuffers.Offset} angularVeclocityOffset
 * @param {flatbuffers.Offset} angularAccelerationOffset
 * @returns {flatbuffers.Offset}
 */
VR.Pose.createPose = function(builder, positionOffset, linearVelocityOffset, linearAccelerationOffset, orientationOffset, angularVeclocityOffset, angularAccelerationOffset) {
  VR.Pose.startPose(builder);
  VR.Pose.addPosition(builder, positionOffset);
  VR.Pose.addLinearVelocity(builder, linearVelocityOffset);
  VR.Pose.addLinearAcceleration(builder, linearAccelerationOffset);
  VR.Pose.addOrientation(builder, orientationOffset);
  VR.Pose.addAngularVeclocity(builder, angularVeclocityOffset);
  VR.Pose.addAngularAcceleration(builder, angularAccelerationOffset);
  return VR.Pose.endPose(builder);
}

/**
 * @constructor
 */
VR.Gamepad = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VR.Gamepad}
 */
VR.Gamepad.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.Gamepad=} obj
 * @returns {VR.Gamepad}
 */
VR.Gamepad.getRootAsGamepad = function(bb, obj) {
  return (obj || new VR.Gamepad).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.Gamepad=} obj
 * @returns {VR.Gamepad}
 */
VR.Gamepad.getSizePrefixedRootAsGamepad = function(bb, obj) {
  return (obj || new VR.Gamepad).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
VR.Gamepad.prototype.id = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
VR.Gamepad.prototype.index = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {boolean}
 */
VR.Gamepad.prototype.connected = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
VR.Gamepad.prototype.mapping = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.Gamepad.prototype.axes = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns {number}
 */
VR.Gamepad.prototype.axesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float64Array}
 */
VR.Gamepad.prototype.axesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @param {VR.GamepadButton=} obj
 * @returns {VR.GamepadButton}
 */
VR.Gamepad.prototype.buttons = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new VR.GamepadButton).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
VR.Gamepad.prototype.buttonsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {VR.Pose=} obj
 * @returns {VR.Pose|null}
 */
VR.Gamepad.prototype.pose = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new VR.Pose).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
VR.Gamepad.startGamepad = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} idOffset
 */
VR.Gamepad.addId = function(builder, idOffset) {
  builder.addFieldOffset(0, idOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} index
 */
VR.Gamepad.addIndex = function(builder, index) {
  builder.addFieldInt32(1, index, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} connected
 */
VR.Gamepad.addConnected = function(builder, connected) {
  builder.addFieldInt8(2, +connected, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} mappingOffset
 */
VR.Gamepad.addMapping = function(builder, mappingOffset) {
  builder.addFieldOffset(3, mappingOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} axesOffset
 */
VR.Gamepad.addAxes = function(builder, axesOffset) {
  builder.addFieldOffset(4, axesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.Gamepad.createAxesVector = function(builder, data) {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Gamepad.startAxesVector = function(builder, numElems) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} buttonsOffset
 */
VR.Gamepad.addButtons = function(builder, buttonsOffset) {
  builder.addFieldOffset(5, buttonsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
VR.Gamepad.createButtonsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.Gamepad.startButtonsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} poseOffset
 */
VR.Gamepad.addPose = function(builder, poseOffset) {
  builder.addFieldOffset(6, poseOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
VR.Gamepad.endGamepad = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} idOffset
 * @param {number} index
 * @param {boolean} connected
 * @param {flatbuffers.Offset} mappingOffset
 * @param {flatbuffers.Offset} axesOffset
 * @param {flatbuffers.Offset} buttonsOffset
 * @param {flatbuffers.Offset} poseOffset
 * @returns {flatbuffers.Offset}
 */
VR.Gamepad.createGamepad = function(builder, idOffset, index, connected, mappingOffset, axesOffset, buttonsOffset, poseOffset) {
  VR.Gamepad.startGamepad(builder);
  VR.Gamepad.addId(builder, idOffset);
  VR.Gamepad.addIndex(builder, index);
  VR.Gamepad.addConnected(builder, connected);
  VR.Gamepad.addMapping(builder, mappingOffset);
  VR.Gamepad.addAxes(builder, axesOffset);
  VR.Gamepad.addButtons(builder, buttonsOffset);
  VR.Gamepad.addPose(builder, poseOffset);
  return VR.Gamepad.endGamepad(builder);
}

/**
 * @constructor
 */
VR.HMD = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VR.HMD}
 */
VR.HMD.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.HMD=} obj
 * @returns {VR.HMD}
 */
VR.HMD.getRootAsHMD = function(bb, obj) {
  return (obj || new VR.HMD).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.HMD=} obj
 * @returns {VR.HMD}
 */
VR.HMD.getSizePrefixedRootAsHMD = function(bb, obj) {
  return (obj || new VR.HMD).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.HMD.prototype.leftProjectionMatrix = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.HMD.prototype.leftProjectionMatrixLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.HMD.prototype.leftProjectionMatrixArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.HMD.prototype.leftViewMatrix = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.HMD.prototype.leftViewMatrixLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.HMD.prototype.leftViewMatrixArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.HMD.prototype.rightProjectionMatrix = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.HMD.prototype.rightProjectionMatrixLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.HMD.prototype.rightProjectionMatrixArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
VR.HMD.prototype.rightViewMatrix = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
VR.HMD.prototype.rightViewMatrixLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
VR.HMD.prototype.rightViewMatrixArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {VR.Pose=} obj
 * @returns {VR.Pose|null}
 */
VR.HMD.prototype.pose = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new VR.Pose).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
VR.HMD.startHMD = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} leftProjectionMatrixOffset
 */
VR.HMD.addLeftProjectionMatrix = function(builder, leftProjectionMatrixOffset) {
  builder.addFieldOffset(0, leftProjectionMatrixOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.HMD.createLeftProjectionMatrixVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.HMD.startLeftProjectionMatrixVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} leftViewMatrixOffset
 */
VR.HMD.addLeftViewMatrix = function(builder, leftViewMatrixOffset) {
  builder.addFieldOffset(1, leftViewMatrixOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.HMD.createLeftViewMatrixVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.HMD.startLeftViewMatrixVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rightProjectionMatrixOffset
 */
VR.HMD.addRightProjectionMatrix = function(builder, rightProjectionMatrixOffset) {
  builder.addFieldOffset(2, rightProjectionMatrixOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.HMD.createRightProjectionMatrixVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.HMD.startRightProjectionMatrixVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rightViewMatrixOffset
 */
VR.HMD.addRightViewMatrix = function(builder, rightViewMatrixOffset) {
  builder.addFieldOffset(3, rightViewMatrixOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
VR.HMD.createRightViewMatrixVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.HMD.startRightViewMatrixVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} poseOffset
 */
VR.HMD.addPose = function(builder, poseOffset) {
  builder.addFieldOffset(4, poseOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
VR.HMD.endHMD = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} leftProjectionMatrixOffset
 * @param {flatbuffers.Offset} leftViewMatrixOffset
 * @param {flatbuffers.Offset} rightProjectionMatrixOffset
 * @param {flatbuffers.Offset} rightViewMatrixOffset
 * @param {flatbuffers.Offset} poseOffset
 * @returns {flatbuffers.Offset}
 */
VR.HMD.createHMD = function(builder, leftProjectionMatrixOffset, leftViewMatrixOffset, rightProjectionMatrixOffset, rightViewMatrixOffset, poseOffset) {
  VR.HMD.startHMD(builder);
  VR.HMD.addLeftProjectionMatrix(builder, leftProjectionMatrixOffset);
  VR.HMD.addLeftViewMatrix(builder, leftViewMatrixOffset);
  VR.HMD.addRightProjectionMatrix(builder, rightProjectionMatrixOffset);
  VR.HMD.addRightViewMatrix(builder, rightViewMatrixOffset);
  VR.HMD.addPose(builder, poseOffset);
  return VR.HMD.endHMD(builder);
}

/**
 * @constructor
 */
VR.State = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {VR.State}
 */
VR.State.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.State=} obj
 * @returns {VR.State}
 */
VR.State.getRootAsState = function(bb, obj) {
  return (obj || new VR.State).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {VR.State=} obj
 * @returns {VR.State}
 */
VR.State.getSizePrefixedRootAsState = function(bb, obj) {
  return (obj || new VR.State).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
VR.State.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @param {VR.HMD=} obj
 * @returns {VR.HMD|null}
 */
VR.State.prototype.hmd = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new VR.HMD).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {VR.Gamepad=} obj
 * @returns {VR.Gamepad}
 */
VR.State.prototype.gamepads = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new VR.Gamepad).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
VR.State.prototype.gamepadsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
VR.State.startState = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timestamp
 */
VR.State.addTimestamp = function(builder, timestamp) {
  builder.addFieldFloat64(0, timestamp, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hmdOffset
 */
VR.State.addHmd = function(builder, hmdOffset) {
  builder.addFieldOffset(1, hmdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} gamepadsOffset
 */
VR.State.addGamepads = function(builder, gamepadsOffset) {
  builder.addFieldOffset(2, gamepadsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
VR.State.createGamepadsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
VR.State.startGamepadsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
VR.State.endState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
VR.State.finishStateBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
VR.State.finishSizePrefixedStateBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timestamp
 * @param {flatbuffers.Offset} hmdOffset
 * @param {flatbuffers.Offset} gamepadsOffset
 * @returns {flatbuffers.Offset}
 */
VR.State.createState = function(builder, timestamp, hmdOffset, gamepadsOffset) {
  VR.State.startState(builder);
  VR.State.addTimestamp(builder, timestamp);
  VR.State.addHmd(builder, hmdOffset);
  VR.State.addGamepads(builder, gamepadsOffset);
  return VR.State.endState(builder);
}

// Exports for Node.js and RequireJS
this.VR = VR;
